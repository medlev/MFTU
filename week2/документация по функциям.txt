Оглавление
2.2 Функции . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
2.2.1 Функции . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
2.2.2 Файлы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
2.2.3 Функциональное программирование . . . . . . . . . . . . . . . . . . . . . . 26
2.2.4 Декораторы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
2.2.5 Генераторы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36

2.2. Функции
2.2.1. Функции
Функция --- это блок кода, который можно переиспользовать несколько раз в разных местах
программы. Мы можем передавать функции аргументы и получать возвращаемые
значения. Чтобы определить функцию в языке Python, нужно использовать литерал def и
с помощью отступа определить блок кода функции. По PEP8 функции называют snake_caseом.
Объявим функцию, которая возвращает секундную часть текущего времени.
from datetime import datetime
def get_seconds():
"""Return current seconds"""
return datetime.now().second
get_seconds()
24
Чтобы получить документационную строку, можно обратиться к атрибуту doc, а имя
функции получается с помощью атрибута name.
get_seconds.__doc__
18
Курс "Программирование на Python", Mail.Ru Group
'Return current seconds'
get_seconds.__name__
'get_seconds'
Чаще всего функция определяется с параметрами, т.к. зачастую функции каким-то образом
обрабатывают переданные им значения. Определим функцию split_tags, которая
принимает параметр tag_string (например, равный строке с тегами текущего курса).
Пусть функция разобьёт эту строку по запятым и вернёт список тегов.
def split_tags(tag_string):
tag_list = []
for tag in tag_string.split(','):
tag_list.append(tag.strip())
return tag_list
split_tags('python, coursera, mooc')
['python', 'coursera', 'mooc']
При вызове этой же функции без параметров получаем ошибку, т.к. функция ожидает
заявленный параметр и не может работать без него.
split_tags()
---------------------------------------------------------------------------
TypeError Traceback (most recent call last)
<ipython-input-5-866c00aba286> in <module>()
----> 1 split_tags()
TypeError: split_tags() missing 1 required positional argument: 'tag_string'
Выше мы не указывали явно, какого типа параметры функция ожидает, потому что
Python --- это язык с динамической типизацией. Но, например, в языке C типы аннотируются,
т.е. явно указывается, какого типа должен быть параметр функции и какого типа
возвращаемые значения. В Python-е последних версий появилась возможность аннотировать
типы, и делается это с помощью двоеточия в случае параметров, а стрелочкой
указывают тип возвращаемого значения. Однако, если мы передадим в функцию параметры
других типов, код все равно выполнится, потому что Python --- это динамический
язык, и аннотация типов призвана лишь помочь программисту или его IDE отловить какието
ошибки.
def add(x: int, y: int) -> int:
return x + y
print(add(10, 11))
print(add('still ', 'works'))
19
Курс "Программирование на Python", Mail.Ru Group
21
still works
Во многих других языках программирования значения параметра передаются в функцию
либо по ссылке, либо по значению (и между двумя этими случаями проводится строгая
граница). В Python-е каждая переменная является связью имени с объектом в памяти,
и именно эта ссылка на объект передается в функцию. Таким образом, если мы передадим
в функцию список и в ходе выполнения функции изменим его, этот список измениться
глобально:
def extender(source_list, extend_list):
source_list.extend(extend_list)
values = [1, 2, 3]
extender(values, [4, 5, 6])
print(values)
[1, 2, 3, 4, 5, 6]
Если мы так же попытаемся изменить объект неизменяего типа, он, что логично, не
изменится (мы передаем ссылку на объект в памяти, который неизменяем).
def replacer(source_tuple, replace_with):
source_tuple = replace_with
user_info = ('Guido', '31/01')
replacer(user_info, ('Larry', '27/09'))
print(user_info)
('Guido', '31/01')
Однако изменение глобальных переменных внутри функции является плохим тоном,
потому что часто бывает не очевидно, какие глобальные объекты как изменяются в каких
функциях. В таких ситуациях советуют использовать возвращаемые значения.
В Python-е также существуют именованные аргументы, которые иногда бывают полезны.
Если явно указывать имена аргументов, можно передавать их в любом порядке. Кроме
того, при вызове функции будет видно, каким аргументам мы присваиваем передаваемые
значения.
def say(greeting, name):
print('{} {}!'.format(greeting, name))
say('Hello', 'Kitty')
say(name='Kitty', greeting='Hello')
20
Курс "Программирование на Python", Mail.Ru Group
Hello Kitty!
Hello Kitty!
Важно понимать, что переменные, объявленные вне области видимости функции, нельзя
изменять.
result = 0
def increment():
result += 1
return result
print(increment())
---------------------------------------------------------------------------
UnboundLocalError Traceback (most recent call last)
<ipython-input-10-da69e363a112> in <module>()
5 return result
6
----> 7 print(increment())
<ipython-input-10-da69e363a112> in increment()
2
3 def increment():
----> 4 result += 1
5 return result
6
UnboundLocalError: local variable 'result' referenced before assignment
global & nonlocal
В Python-е всё же есть возможность изменять глобальные переменные с помощью
global или non local, но использовать эти особенности не рекомендуется.
Существует также возможность использовать аргументы по умолчанию, которые можно
передавать, а можно не передавать. У этих аргументов, могут быть определены какието
дефолтные значения, которые прописываются при объявлении функции:
def greeting(name='it\'s me...'):
print('Hello, {}'.format(name))
greeting()
Hello, it's me...
Стоит быть внимательными с аргументами по умолчанию, если мы используем в качестве
их дефолтного значения объекты изменяемого типа. Например, объявим функцию,
21
Курс "Программирование на Python", Mail.Ru Group
которая прибавляет к списку элемент 1. В качестве значения по умолчанию зададим пустой
список:
def append_one(iterable=[]):
iterable.append(1)
return iterable
print(append_one([1]))
[1, 1]
Что произойдёт, если мы вызовем эту функцию дважды:
print(append_one())
print(append_one())
[1]
[1, 1]
Чтобы разобраться, проверим, каковы дефолтные значения параметров функции:
print(append_one.__defaults__)
([1, 1],)
Почему так происходит? При определении функции, когда интерпретатор Python-а проходит
по файлу с кодом, определяется связь между именем функции и дефолтными значениями.
Таким образом, у каждой функции появляется tuple с дефолтными значениями.
Именно в эти переменные каждый раз и происходит запись. Таким образом, если дефолтные
значения являются изменяемыми, в них можно записывать, потому что это обычные
переменные.
Чтобы исправить предыдущий пример, возьмём в качестве значения по умолчанию
None:
def function(iterable=None):
if iterable is None:
iterable = []
def function(iterable=None):
iterable = iterable or []
Довольно красивой особенностью Python-а является возможность определения функции,
которая принимает разные количества аргументов. Определим функцию printer,
которая принимает любое количество аргументов --- все аргументы записываются в tuple
args. Затем функция печатает по порядку все аргументы:
22
Курс "Программирование на Python", Mail.Ru Group
def printer(*args):
print(type(args))
for argument in args:
print(argument)
printer(1, 2, 3, 4, 5)
<class 'tuple'>
1
2
3
4
5
Также в аргументах можно развернуть список значений:
name_list = ['John', 'Bill', 'Amy']
printer(*name_list)
<class 'tuple'>
John
Bill
Amy
Точно так же это работает в случае со словарями, в данном случае мы можем определить
функцию printer, которая принимает разное количество именованных аргументов.
При этом переменная kwargs будет иметь тип dict.
def printer(**kwargs):
print(type(kwargs))
for key, value in kwargs.items():
print('{}: {}'.format(key, value))
printer(a=10, b=11)
<class 'dict'>
a: 10
b: 11
Точно так же мы можем разыменовывать (разворачивать) словари, используя **:
23
Курс "Программирование на Python", Mail.Ru Group
payload = {
'user_id': 117,
'feedback': {
'subject': 'Registration fields',
'message': 'There is no country for old men'
}
}
printer(**payload)
<class 'dict'>
user_id: 117
feedback: {'subject': 'Registration fields', 'message': 'There is no
country for old men'}
Это используется практически везде и позволяет вам определять очень гибкие функции,
которые принимают различное количество аргументов — именованных и позиционных.
2.2.2. Файлы
Для открытия файлов используется встроенный метод open, которой передаётся путь к
файлу --- например, filename. Функция open возвращает файловый объект, с которым
мы потом можем работать, для того чтобы записывать данные или читать данные из файлов.
f = open('filename')
Файлы можно открывать по-разному --- на запись, на чтение, на чтение и запись, на
дозапись. Делается это с помощью модов, которые также передаются в функцию open.
Например, a --- это дозапись, w --- это, очевидно, запись, r — это прочтение, r+ --- это
запись и чтение одновременно. Точно так же можно открывать файл в бинарном виде, то
есть работать с бинарными данными --- для этого к моду добавляют букву b.
text_modes = ['r', 'w', 'a', 'r+']
binary_modes = ['br', 'bw', 'ba', 'br+']
f = open('filename', 'w')
Чтобы записать в файл, применяем к соответствующему файловому объекту метод
write, передавая ему строку. Метод write возвращает количество символов, которые
мы записали (или количество байт в случае байтовой строки).
f.write('The world is changed.\nI taste it in the water.\n')
47
24
Курс "Программирование на Python", Mail.Ru Group
Закрывают файлы так:
f.close()
В Python принято закрывать файлы, т.к. в противном случае может произойти нечто
неприятное --- например, в операционной системе могут закончиться файловые дескрипторы.
Итак, чтобы открыть файл на чтение и запись, нам нужно использовать r+. Мы можем
читать данные из файла с помощью метода read, который по умолчанию читает столько,
сколько сможет (если файл слишком большой, он может не поместиться в памяти). Вы
также можете указать в методе read конкретное количество информации, которое вы хотите
прочитать, передав size.
f = open('filename', 'r+')
f.read()
'The world is changed.\nI taste it in the water.\n'
f.tell()
47
Когда мы прочитали весь файл, указатель того, где мы сейчас находимся в файле --- в
самом конце (в примере выше --- на 47-ом символе). Если мы попробуем прочитать еще
раз, то мы ничего не найдем. Для того чтобы прочитать файл заново, нужно использовать
метод seek и перенести указатель на начало файла.
f.read()
''
f.seek(0)
f.tell()
0
print(f.read())
f.close() # файлы всегда нужно закрывать
The world is changed.
I taste it in the water.
Для того, чтобы прочесть одну строку из файла, есть метод readline, а чтобы разбить
файл на строки и поместить их в список --- метод readlines.
f = open('filename', 'r+')
f.readline()
f.close()
25
Курс "Программирование на Python", Mail.Ru Group
'The world is changed.\n'
f = open('filename', 'r+')
f.readlines()
['The world is changed.\n', 'I taste it in the water.\n']
Если закрыть файл, вызов функции read() приведёт к ошибке --- закрытый файл нельзя
прочитать.
Рекомендуется открывать файлы несколько по-другому --- с помощью контекстного менеджера,
который позволяет не заботиться о закрытии файлов. Вы можете открыть файл
с помощью оператора with, записать файловый объект в переменную f и потом работать
с файлом внутри этого контекстного блока. После выхода из блока интерпретатор Python
закроет файл.
with open('filename') as f:
print(f.read())
2.2.3. Функциональное программирование
Функции в Python --- это такие же объекты, как и, например, строки, списки или классы.
Их можно передавать в другие функции, возвращать из функций, создавать на лету --- то
есть это объекты первого класса.
def caller(func, params):
return func(*params)
def printer(name, origin):
print('I\'m {} of {}!'.format(name, origin))
caller(printer, ['Moana', 'Motunui'])
I'm Moana of Motunui!
Итак, функции можно передавать в функции. Также их можно создавать внутри других
функций.
def get_multiplier():
def inner(a, b):
return a * b
return inner
multiplier = get_multiplier()
multiplier(10, 11)
26
Курс "Программирование на Python", Mail.Ru Group
110
Т.к. мы вернули другую функцию, в переменной multiplier теперь хранится функция
inner:
print(multiplier.__name__)
inner
Давайте попробуем определить функцию inner, которая будет принимать один аргумент
и умножать его всегда на то самое число, которое мы передали в get_multiplier.
Например, мы передаем get_multiplier двойку и получаем функцию, которая всегда
умножает переданный ей аргумент на двойку. Эта концепция называется "замыканием".
def get_multiplier(number):
def inner(a):
return a * number
return inner
multiplier_by_2 = get_multiplier(2)
multiplier_by_2(10)
20
Этот приём очень важен и в дальнейшем будет использоваться в декораторах.
Иногда бывает необходимо применить какую-то функцию к набору элементов. Для этих
целей существует несколько стандартных функций. Одна из таких функций — это map,
которая принимает функцию и какой-то итерабельный объект (например, список) и применяет
полученную функцию ко всем элементам объекта.
def squarify(a):
return a ** 2
list(map(squarify, range(5)))
[0, 1, 4, 9, 16]
Обратите внимание на вызов функции list вокруг map'а, потому что map по умолчанию
возвращает map object (некий итерабельный объект)
.
То же самое можно сделать и без функции map, но более длинно:
squared_list = []
for number in range(5):
squared_list.append(squarify(number))
print(squared_list)
27
Курс "Программирование на Python", Mail.Ru Group
[0, 1, 4, 9, 16]
Ещё одна функция, которая часто используется в контексте функционального программирования,
это функция filter. Функция filter позволяет фильтровать по какому-то
предикату итерабельный объект. Она принимает на вход функцию-условие и сам итерабельный
объект.
def is_positive(a):
return a > 0
list(filter(is_positive, range(-2, 3)))
[1, 2]
Заметим, что несмотря на то, что map и filter очень мощны, не стоит злоупотреблять
ими, т.к. это ухудшает читаемость кода.
Если мы хотим передать в map небольшую функцию, которая нам больше не понадобится,
можно использовать анонимные функции (или lambda-функции). Lambda позволяет
вам определить функцию in place, то есть без литерала def. Сделаем то же самое, что
и в предыдущем примере, c помощью lambda:
list(map(lambda x: x ** 2, range(5)))
[0, 1, 4, 9, 16]
Лямбда-функция --- это как обычная функция, но без имени:
type(lambda x: x ** 2)
function
Lambda можно применять с filter:
list(filter(lambda x: x > 0, range(-2, 3)))
[1, 2]
Упражнение: написать функцию, которая превращает список чисел в список строк.
def stringify_list(num_list):
return list(map(str, num_list))
stringify_list(range(10))
['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
28
Курс "Программирование на Python", Mail.Ru Group
Модуль functools позволяет использовать функциональные особенности Python-а
ещё лучше. Например, в functools в последних версиях языка принесли функцию reduce,
которая позволяет сжимать данные, применяя последовательно функцию и запоминая результат:
from functools import reduce
def multiply(a, b):
return a * b
reduce(multiply, [1, 2, 3, 4, 5])
# reduce умножает 1 на 2, затем результат этого умножения на 3 и т.д.
120
То же самое можно сделать с помощью анонимной функции:
reduce(lambda x, y: x * y, range(1, 5))
24
Метод partial из functools который позволяет немного модифицировать поведение
функций, а именно задать функцию с частью параметров исходной функции, а остальные
параметры заменить на некоторые дефолтные значения. Например:
from functools import partial
def greeter(person, greeting):
return '{}, {}!'.format(greeting, person)
hier = partial(greeter, greeting='Hi')
helloer = partial(greeter, greeting='Hello')
print(hier('brother'))
print(helloer('sir'))
Hi, brother!
Hello, sir!
До этого момента мы с вами определяли списки стандартным способом, однако в питоне
существует более красивая и лаконичная конструкция для создания списков и других
коллекций. Раньше мы делали:
29
Курс "Программирование на Python", Mail.Ru Group
square_list = []
for number in range(10):
square_list.append(number ** 2)
print(square_list)
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
Лучше использовать списочные выражения (list comprehensions), то есть писать цикл
прямо в квадратных скобках:
square_list = [number ** 2 for number in range(10)]
print(square_list)
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
Со списочными выражениями код работает немного быстрее.
Точно так же можно написать списочное выражение с некоторым условием:
even_list = [num for num in range(10) if num % 2 == 0]
print(even_list)
[0, 2, 4, 6, 8]
С помощью list comprehensions можно определять словари таким образом:
square_map = {number: number ** 2 for number in range(5)}
print(square_map)
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
Если применять list comprehensions с фигурными скобками, но без двоеточий, мы получим
set:
reminders_set = {num % 10 for num in range(100)}
print(reminders_set)
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
Списочные выражения позволяют вам делать вложенные списки for и другие сложные
выражения. Тем не менее, делать это не рекомендуется, т.к. это снижает читаемость кода.
Без скобок списочное выражение возвращает генератор --- объект, по которому можно
итерироваться (подробнее про генераторы будет рассказано позже).
print(type(number ** 2 for number in range(5)))
30
Курс "Программирование на Python", Mail.Ru Group
<class 'generator'>
Ещё одна важная функция --- функция zip --- позволяет вам склеить два итерабельных
объекта. В следующем примере мы по порядку соединяем объекты из numList и
squaredList в кортежи:
num_list = range(7)
squared_list = [x ** 2 for x in num_list]
list(zip(num_list, squared_list))
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25), (6, 36)]
2.2.4. Декораторы
Декоратор --- это функция, которая принимает функцию и возвращает функцию. И ничего
более. Например, простейший декоратор принимает функци и возвращает её же:
def decorator(func):
return func
@decorator # синтаксис декоратора
def decorated():
print('Hello!')
Выражение с @ --- всего лишь синтаксический сахар. Мы можем написать то же самое
без него:
decorated = decorator(decorated)
Чуть более сложный декоратор, который меняет функцию на другую:
def decorator(func):
def new_func():
pass
return new_func
@decorator
def decorated():
print('Hello!')
decorated()
print(decorated.__name__)
31
Курс "Программирование на Python", Mail.Ru Group
new_func
Пример: написать декоратор, который записывает в лог результат декорируемой функции.
В этом примере с помощью декоратора logger мы подменяем декорируемую функцию
функцией wrapped. Эта функция принимает на вход тот же num_list и возвращает
тот же результат, что и исходная функция, но кроме этого записывает результат в логфайл.
def logger(func):
def wrapped(num_list):
result = func(num_list)
with open('log.txt', 'w') as f:
f.write(str(result))
return result
return wrapped
@logger
def summator(num_list):
return sum(num_list)
print('Summator: {}'.format(summator([1, 2, 3, 4])))
Summator: 10
Можно переписать декоратор так, чтобы он мог применяться не только к функциям,
которые принимают num_list, а к функциям, которые принимают любое количество аргументов:
In [5]:
def logger(func):
def wrapped(*args, **kwargs):
result = func(*args, **kwargs)
with open('log.txt', 'w') as f:
f.write(str(result))
return result
return wrapped
Из-за того, что с помощью декоратора мы подменили функцию, её имя поменялось.
print(summator.__name__)
wrapped
Этот факт иногда мешает при отладке. Чтобы такого не происходило, можно использовать
декоратор wraps из модуля functools. Он подменяет определённые аргументы,
32
Курс "Программирование на Python", Mail.Ru Group
docstring-и и названия так, что функция не меняется:
In [5]:
import functools
def logger(func):
@functools.wraps(func)
def wrapped(*args, **kwargs):
result = func(*args, **kwargs)
with open('log.txt', 'w') as f:
f.write(str(result))
return result
return wrapped
@logger
def summator(num_list):
return sum(num_list)
print(summator.__name__)
wrapped
Более сложная задача: написать декоратор с параметром, который записывает лог в
указанный файл. Для этого logger должен принимать имя файла и возвращать декоратор,
который принимает функцию и подменяет её функцией wrapped, как мы делали до
этого. Всё просто:
33
Курс "Программирование на Python", Mail.Ru Group
def logger(filename):
def decorator(func):
def wrapped(*args, **kwargs):
result = func(*args, **kwargs)
with open(filename, 'w') as f:
f.write(str(result))
return result
return wrapped
return decorator
@logger('new_log.txt')
def summator(num_list):
return sum(num_list)
# без синтаксического сахара:
# summator = logger('log.txt')(summator)
summator([1, 2, 3, 4, 5, 6])
with open('new_log.txt', 'r') as f:
print(f.read())
21
Посмотрим, что будет, если применить сразу несколько декораторов:
def first_decorator(func):
def wrapped():
print('Inside first_decorator product')
return func()
return wrapped
def second_decorator(func):
def wrapped():
print('Inside second_decorator product')
return func()
return wrapped
34
Курс "Программирование на Python", Mail.Ru Group
@first_decorator
@second_decorator
def decorated():
print('Finally called...')
# то же самое, но без синтаксического сахара:
# decorated = first_decorator(second_decorator(decorated))
decorated()
Inside first_decorator product
Inside second_decorator product
Finally called...
Видим, что сначала вызвался сначала первый декоратор, потом второй. Разберём это
подробнее. Функция second_decorator возвращает новую функцию wrapped, таким образом,
функция подменяется на wrapped внутри second_decorator-а. После этого вызывается
first_decorator, который принимает функцию полученную из
second_decorator-а wrapped и возвращает ещё одну функцию wrapped заменяя decorated
на неё. Таким образом, итоговая функция decorated — это функция wrapped из first_decorator-а,
вызывающая функцию из second_decorator-а.
Ещё один пример на применение декораторов. Обратите внимание, что сначала теги
идут в том же порядке, что и декораторы, а затем в обратном. Это происходит потому, что
декораторы вызываются один внутри другого.
35
Курс "Программирование на Python", Mail.Ru Group
def bold(func):
def wrapped():
return "<b>" + func() + "</b>"
return wrapped
def italic(func):
def wrapped():
return "<i>" + func() + "</i>"
return wrapped
@bold
@italic
def hello():
return "hello world"
# hello = bold(italic(hello))
print(hello())
<b><i>hello world</i></b>
2.2.5. Генераторы
Простейший генератор --- это функция в которой есть оператор yield. Этот оператор возвращает
результат, но не прерывает функцию. Пример:
def even_range(start, end):
current = start
while current < end:
yield current
current += 2
for number in even_range(0, 10):
print(number)
0
2
4
6
8
Генератор even_range прибавляет к числу двойку и делает с ним операцию yield,
пока current < end. Каждый раз, когда выполняется yield, возвращается значение
36
Курс "Программирование на Python", Mail.Ru Group
current, и каждый раз, когда мы просим следующий элемент, выполнение функции возвращается
к последнему моменту, после чего она продолжает исполняться. Чтобы посмотреть,
как это происходит на самом деле, можно воспользоваться функцией next, которая
действительно применяется каждый раз при итерации.
ranger = even_range(0, 4)
next(ranger)
0
next(ranger)
2
next(ranger)
---------------------------------------------------------------------------
StopIteration Traceback (most recent call last)
<ipython-input-6-9065b0f81b55> in <module>()
----> 1 next(ranger)
StopIteration:
Мы получили ошибку, т.к. у генератора больше нет значений, которые он может выдать.
Можем проверить, что функция действительно прерывается каждый раз после выполнения
yield:
def list_generator(list_obj):
for item in list_obj:
yield item
print('After yielding {}'.format(item))
generator = list_generator([1, 2])
next(generator)
1
next(generator)
After yielding 1
2
next(generator)
37
Курс "Программирование на Python", Mail.Ru Group
After yielding 2
---------------------------------------------------------------------------
StopIteration Traceback (most recent call last)
<ipython-input-10-1d0a8ea12077> in <module>()
----> 1 next(generator)
StopIteration:
Когда применяются генераторы? Они нужны, например, тогда, когда мы хотим итерироваться
по большому количеству значений, но не хотим загружать ими память. Именно
поэтому стандартная функция range() реализована как генератор (впрочем, так было не
всегда).
Приведём классический пример про числа Фибоначчи:
def fibonacci(number):
a = b = 1
for _ in range(number):
yield a
a, b = b, a + b
for num in fibonacci(10):
print(num)
1
1
2
3
5
8
13
21
34
55
С таким генератором нам не нужно помнить много чисел Фибоначчи, которые быстро
растут --- достаточно помнить два последних числа.
Еще одна важная особенность генераторов --- это возможность передавать генератору
какие-то значения. Эта особенность активно используется в асинхронном программировании,
о котором будет речь позднее. Пока определим генератор accumulator, который
хранит общее количество данных и в бесконечном цикле получает с помощью оператора
yield значение. На первой итерации генератор возвращает начально значение total.
После этого мы можем послать данные в генератор с помощью метода генератора send.
Поскольку генератор остановил исполнение в некоторой точке, мы можем послать в эту
точку значение, которое запишется в value. Далее, если value не было передано, генератор
выходит из цикла, иначе прибавляем его к total.
38
Курс "Программирование на Python", Mail.Ru Group
def accumulator():
total = 0
while True:
value = yield total
print('Got: {}'.format(value))
if not value: break
total += value
generator = accumulator()
next(generator)
0
print('Accumulated: {}'.format(generator.send(1)))
Got: 1
Accumulated: 1
print('Accumulated: {}'.format(generator.send(1)))
Got: 1
Accumulated: 2
print('Accumulated: {}'.format(generator.send(1)))
Got: 1
Accumulated: 3
next(generator)
Got: None
---------------------------------------------------------------------------
StopIteration Traceback (most recent call last)
<ipython-input-18-1d0a8ea12077> in <module>()
----> 1 next(generator)
StopIteration:
39